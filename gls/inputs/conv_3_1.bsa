F1000101 00000007
# data[(15, 0)] : init `data1` reg with const `7`

FF000101 0002F00B
# data[ 5,  0] = 11 :: alu_op 'mult_0'
# data[ 6,  6] =  0 :: sign   'u'
# data[15, 12] = 15 :: flag   'pe'
# data[17, 16] =  2 :: data0  'wire_a' (REG_BYPASS)
# data[19, 18] =  0 :: data1  'const_b' (REG_CONST)

00020101 00000005
# data[(3, 0)] : @ tile (1, 1) connect wire 5 (out_BUS16_S2_T0) to data0

00080101 0020C002
# data[(1, 0)] : @ tile (1, 1) connect wire 2 (in_BUS16_S3_T0) to out_BUS16_S0_T0
# data[(15, 14)] : @ tile (1, 1) connect wire 3 (pe_out_res) to out_BUS16_S1_T2
# data[(21, 20)] : @ tile (1, 1) connect wire 2 (in_BUS16_S3_T0) to out_BUS16_S2_T0

00080102 00000001
# data[(1, 0)] : @ tile (1, 2) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0

F1000103 00000005
# data[(15, 0)] : init `data1` reg with const `5`

FF000103 0002F00B
# data[ 5,  0] = 11 :: alu_op 'mult_0'
# data[ 6,  6] =  0 :: sign   'u'
# data[15, 12] = 15 :: flag   'pe'
# data[17, 16] =  2 :: data0  'wire_a' (REG_BYPASS)
# data[19, 18] =  0 :: data1  'const_b' (REG_CONST)

00020103 00000006
# data[(3, 0)] : @ tile (1, 3) connect wire 6 (out_BUS16_S2_T1) to data0

00080103 00003001
# data[(1, 0)] : @ tile (1, 3) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0
# data[(13, 12)] : @ tile (1, 3) connect wire 3 (pe_out_res) to out_BUS16_S1_T1
# data[(23, 22)] : @ tile (1, 3) connect wire 0 (in_BUS16_S0_T1) to out_BUS16_S2_T1

00000104 00000000
# data[(32, 30)] : @ tile (1, 4) connect wire 0 (in_0_BUS1_0_0) to out_0_BUS1_2_0 (REG 00)
# da99[(31, 30)] : REG_FIELD_HACK (bsbuilder.py) hand-written code above

01000104 00000000
# data[(32, 30)] : @ tile (1, 4) connect wire 0 (in_0_BUS1_0_0) to out_0_BUS1_2_0 (REG 01)
# da99[(32, 32)] : REG_FIELD_HACK (bsbuilder.py) hand-written code above

00010104 00C00C00
# data[(11, 10)] : @ tile (1, 4) connect wire 3 (rdata) to out_0_BUS16_S1_T0
# data[(23, 22)] : @ tile (1, 4) connect wire 3 (rdata) to out_0_BUS16_S2_T1

00020104 00000054
# data[(1, 0)] : mode = 0 (linebuffer)
# data[(2, 2)] : tile_en = 1
# data[(15, 3)] : fifo_depth = 10
# data[(18, 16)] : almost_full_count = 0
# data[(19, 19)] : chain_enable = 0

00090104 00000000
# data[(3, 0)] : @ tile (1, 4) connect wire 0 (in_0_BUS16_S2_T0) to wdata

000C0104 00000005
# data[(3, 0)] : @ tile (1, 4) connect wire 5 (out_0_BUS1_S2_T0) to wen

00000105 000000FF
# data[(7, 0)] : lut_value = 0xFF

F3000105 00000000
# data[(0, 0)] : init `bit0` reg with const `0`

F4000105 00000000
# data[(0, 0)] : init `bit1` reg with const `0`

F5000105 00000000
# data[(0, 0)] : init `bit2` reg with const `0`

FF000105 0000E00E
# data[(5, 0)] : alu_op = lut ; 0xE
# data[(6, 6)] : unsigned=0x0
# data[(15, 12] : flag_sel: PE_FLAG_LUT=0xE
# data[(25, 24)]: bit0: 'const_0' (REG_CONST)
# data[(27, 26)]: bit1: 'const_1' (REG_CONST)
# data[(29, 28)]: bit2: 'const_2' (REG_CONST)

00090105 00300000
# data[(21, 20)] : @ tile (1, 5) connect wire 3 (pe_out_res_p) to out_BUS1_S2_T0

00010110 00000000
# data[(1, 0)] : @ tile (1, 16) connect wire 0 (in_0_BUS16_S1_T0) to out_0_BUS16_S0_T0

FF000201 000AF000
# data[ 5,  0] =  0 :: alu_op 'add'
# data[ 6,  6] =  0 :: sign   'u'
# data[15, 12] = 15 :: flag   'pe'
# data[17, 16] =  2 :: data0  'wire_a' (REG_BYPASS)
# data[19, 18] =  2 :: data1  'wire_b' (REG_BYPASS)

00020201 00000005
# data[(3, 0)] : @ tile (2, 1) connect wire 5 (out_BUS16_S2_T0) to data0

00030201 00000007
# data[(3, 0)] : @ tile (2, 1) connect wire 7 (out_BUS16_S1_T2) to data1

00080201 00008003
# data[(1, 0)] : @ tile (2, 1) connect wire 3 (pe_out_res) to out_BUS16_S0_T0
# data[(15, 14)] : @ tile (2, 1) connect wire 2 (in_BUS16_S3_T2) to out_BUS16_S1_T2
# data[(21, 20)] : @ tile (2, 1) connect wire 0 (in_BUS16_S0_T0) to out_BUS16_S2_T0

FF000202 000AF000
# data[ 5,  0] =  0 :: alu_op 'add'
# data[ 6,  6] =  0 :: sign   'u'
# data[15, 12] = 15 :: flag   'pe'
# data[17, 16] =  2 :: data0  'wire_a' (REG_BYPASS)
# data[19, 18] =  2 :: data1  'wire_b' (REG_BYPASS)

00020202 00000009
# data[(3, 0)] : @ tile (2, 2) connect wire 9 (out_BUS16_S2_T4) to data0

00030202 00000006
# data[(3, 0)] : @ tile (2, 2) connect wire 6 (out_BUS16_S1_T1) to data1

00080202 10300001
# data[(1, 0)] : @ tile (2, 2) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0
# data[(13, 12)] : @ tile (2, 2) connect wire 0 (in_BUS16_S0_T1) to out_BUS16_S1_T1
# data[(21, 20)] : @ tile (2, 2) connect wire 3 (pe_out_res) to out_BUS16_S2_T0
# data[(29, 28)] : @ tile (2, 2) connect wire 1 (in_BUS16_S1_T4) to out_BUS16_S2_T4

00080203 00800001
# data[(1, 0)] : @ tile (2, 3) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0
# data[(23, 22)] : @ tile (2, 3) connect wire 2 (in_BUS16_S3_T1) to out_BUS16_S2_T1

00000204 00000000
# data[(32, 30)] : @ tile (2, 4) connect wire 0 (in_0_BUS1_0_0) to out_0_BUS1_2_0 (REG 00)
# da99[(31, 30)] : REG_FIELD_HACK (bsbuilder.py) hand-written code above

01000204 00000000
# data[(32, 30)] : @ tile (2, 4) connect wire 0 (in_0_BUS1_0_0) to out_0_BUS1_2_0 (REG 01)
# da99[(32, 32)] : REG_FIELD_HACK (bsbuilder.py) hand-written code above

00010204 0020C001
# data[(1, 0)] : @ tile (2, 4) connect wire 1 (in_0_BUS16_S2_T0) to out_0_BUS16_S0_T0
# data[(15, 14)] : @ tile (2, 4) connect wire 3 (rdata) to out_0_BUS16_S1_T2
# data[(21, 20)] : @ tile (2, 4) connect wire 2 (in_0_BUS16_S3_T0) to out_0_BUS16_S2_T0

00020204 00000054
# data[(1, 0)] : mode = 0 (linebuffer)
# data[(2, 2)] : tile_en = 1
# data[(15, 3)] : fifo_depth = 10
# data[(18, 16)] : almost_full_count = 0
# data[(19, 19)] : chain_enable = 0

00090204 00000005
# data[(3, 0)] : @ tile (2, 4) connect wire 5 (out_0_BUS16_S2_T0) to wdata

000C0204 00000005
# data[(3, 0)] : @ tile (2, 4) connect wire 5 (out_0_BUS1_S2_T0) to wen

00000205 000000FF
# data[(7, 0)] : lut_value = 0xFF

F3000205 00000000
# data[(0, 0)] : init `bit0` reg with const `0`

F4000205 00000000
# data[(0, 0)] : init `bit1` reg with const `0`

F5000205 00000000
# data[(0, 0)] : init `bit2` reg with const `0`

FF000205 0000E00E
# data[(5, 0)] : alu_op = lut ; 0xE
# data[(6, 6)] : unsigned=0x0
# data[(15, 12] : flag_sel: PE_FLAG_LUT=0xE
# data[(25, 24)]: bit0: 'const_0' (REG_CONST)
# data[(27, 26)]: bit1: 'const_1' (REG_CONST)
# data[(29, 28)]: bit2: 'const_2' (REG_CONST)

00080205 00000001
# data[(1, 0)] : @ tile (2, 5) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0

00090205 00300000
# data[(21, 20)] : @ tile (2, 5) connect wire 3 (pe_out_res_p) to out_BUS1_S2_T0

00080206 00000001
# data[(1, 0)] : @ tile (2, 6) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0

00080207 00000001
# data[(1, 0)] : @ tile (2, 7) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0

00010208 00000001
# data[(1, 0)] : @ tile (2, 8) connect wire 1 (in_0_BUS16_S2_T0) to out_0_BUS16_S0_T0

00080209 00000001
# data[(1, 0)] : @ tile (2, 9) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0

0008020A 00000001
# data[(1, 0)] : @ tile (2, 10) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0

0008020B 00000001
# data[(1, 0)] : @ tile (2, 11) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0

0001020C 00000001
# data[(1, 0)] : @ tile (2, 12) connect wire 1 (in_0_BUS16_S2_T0) to out_0_BUS16_S0_T0

0008020D 00000001
# data[(1, 0)] : @ tile (2, 13) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0

0008020E 00000001
# data[(1, 0)] : @ tile (2, 14) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0

0008020F 00000001
# data[(1, 0)] : @ tile (2, 15) connect wire 1 (in_BUS16_S2_T0) to out_BUS16_S0_T0

00010210 80000000
# data[(31, 30)] : @ tile (2, 16) connect wire 2 (in_0_BUS16_S2_T0) to out_0_BUS16_S3_T0

F1000302 00000000
# data[(15, 0)] : init `data1` reg with const `0`

FF000302 0002F000
# data[ 5,  0] =  0 :: alu_op 'add'
# data[ 6,  6] =  0 :: sign   'u'
# data[15, 12] = 15 :: flag   'pe'
# data[17, 16] =  2 :: data0  'wire_a' (REG_BYPASS)
# data[19, 18] =  0 :: data1  'const_b' (REG_CONST)

00020302 00000008
# data[(3, 0)] : @ tile (3, 2) connect wire 8 (out_BUS16_S2_T3) to data0

00080302 00000000
# data[(27, 26)] : @ tile (3, 2) connect wire 0 (in_BUS16_S0_T3) to out_BUS16_S2_T3

01080302 000000C0
# data[(39, 38)] : @ tile (3, 2) connect wire 3 (pe_out_res) to out_BUS16_S3_T4

F1000303 00000003
# data[(15, 0)] : init `data1` reg with const `3`

FF000303 0002F00B
# data[ 5,  0] = 11 :: alu_op 'mult_0'
# data[ 6,  6] =  0 :: sign   'u'
# data[15, 12] = 15 :: flag   'pe'
# data[17, 16] =  2 :: data0  'wire_a' (REG_BYPASS)
# data[19, 18] =  0 :: data1  'const_b' (REG_CONST)

00020303 00000007
# data[(3, 0)] : @ tile (3, 3) connect wire 7 (out_BUS16_S2_T2) to data0

00080303 0C000000
# data[(25, 24)] : @ tile (3, 3) connect wire 0 (in_BUS16_S0_T2) to out_BUS16_S2_T2
# data[(27, 26)] : @ tile (3, 3) connect wire 3 (pe_out_res) to out_BUS16_S2_T3

00010304 02000000
# data[(25, 24)] : @ tile (3, 4) connect wire 2 (in_0_BUS16_S3_T2) to out_0_BUS16_S2_T2

# INPUT  tile 257 ( 1, 1) / in_BUS16_S3_T0 / wire_0_1_BUS16_S1_T0
# OUTPUT tile 272 ( 1,16) / out_0_BUS16_S0_T0 / wire_1_16_BUS16_S0_T0

# WARNING You did not designate a 16-bit output bus, so I will build one: 
# Configuring side 0 (right side) io1bit tiles as 16bit output bus
00000111 00000001
00000211 00000001
00000311 00000001
00000411 00000001
00000511 00000001
00000611 00000001
00000711 00000001
00000811 00000001
00000911 00000001
00000A11 00000001
00000B11 00000001
00000C11 00000001
00000D11 00000001
00000E11 00000001
00000F11 00000001
00001011 00000001

