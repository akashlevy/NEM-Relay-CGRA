`timescale ${timescale}
`define NUM_TEST_VECTORS ${num_test_vectors}
`define ASSIGNMENT_DELAY ${assign_delay}
`define CONFIG_CLK_PERIOD ${config_clock_period}
`define CLK_PERIOD ${clock_period}
`define ACTIVE_CYCLE_NUMBER ${active_cycle_number}

// Input slices
${input_slices}

// Output slices
${output_slices}

module testbench;
    // Address width
    localparam ADDR_WIDTH = $$clog2(`NUM_TEST_VECTORS);
   
    reg [ADDR_WIDTH - 1 : 0] test_vector_addr;
 
    reg [${input_base}-1: 0] test_vectors [`NUM_TEST_VECTORS - 1 : 0];
    reg [${input_base}-1: 0] test_vector;

    reg [${output_base}-1: 0] test_outputs [`NUM_TEST_VECTORS - 1 : 0];
    reg [${output_base}-1: 0] test_output;

    // Input wires
    ${input_wires}

    // Output wires
    ${output_wires}

    // Clock
    reg clk_in;

    // Power Supplies
    ${pwr_supplies}

    // DUT
    ${tile_module} dut (
        ${dut_io}
        .clk_in(clk_in)
        );

    // Toggle clock
    always begin
        if (test_vector_addr < `ACTIVE_CYCLE_NUMBER) begin
            #(`CONFIG_CLK_PERIOD/2) clk_in =~clk_in;
        end else begin
            #(`CLK_PERIOD/2) clk_in =~clk_in;
        end

    // Read vectors
    initial begin
      $$readmemh("inputs/test_vectors.txt", test_vectors);
      $$readmemh("inputs/test_outputs.txt", test_outputs);
      clk_in <= 0;
      test_vector_addr <= 0;
    end
  
    // Stimulate DUT using input vectors
    always @(negedge clk_in) begin
        // Don't change the inputs right after the clock edge because that will cause problems in GLS
        test_vector_addr <= # `ASSIGNMENT_DELAY (test_vector_addr + 1);
        test_vector <= test_vectors[test_vector_addr];
        test_output <= test_outputs[test_vector_addr];

        // Start toggling after active_cycle_number
        if (test_vector_addr == `ACTIVE_CYCLE_NUMBER) begin
            $$set_toggle_region(testbench);
            $$toggle_start;
            $$display("Started toggle measurement at %d...", `ACTIVE_CYCLE_NUMBER);
        end

        // Stop toggling after last output and finish
        if (test_vector_addr >= `NUM_TEST_VECTORS) begin
            $$toggle_stop;
            $$toggle_report("outputs/out.saif", 1e-12, testbench);
            $$finish(2);
        end

        // Output checks
        ${output_checks}
    end
  
    // Elaboration tasks
    initial begin
        // Annotate delays
        $$sdf_annotate("design/design.sdf", testbench.dut, ,"testbench_sdf.log", "MAXIMUM");

        // Dump to VCD
        $$dumpfile("outputs/out.vcd");
        $$dumpvars(0, dut);
    end
endmodule