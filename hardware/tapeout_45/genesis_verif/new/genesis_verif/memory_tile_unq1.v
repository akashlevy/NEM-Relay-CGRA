//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11789 $ --- $Date: 2013/03/25 $   |
//	-----------------------------------------------
//	
//
//  Source file: /nobackup/nikhil3/github/CGRAGenerator/hardware/generator_z/memory_tile/memory_tile.vp
//  Source template: memory_tile
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter ddepth 	= 1024
// Parameter sb_fs 	= 10000#10000#10000
// Parameter gen_mem_for_busname 	= BUS16
// Parameter bus_config 	= BUS16:16b#1_1:1_1:1_1:1_1:1_1 BUS1:1b#1_1:1_1:1_1:1_1:1_1
// Parameter cb_connections 	= 11111111111111
// Parameter feedthrough_outputs 	= BUS16:00000 BUS1:00000
// Parameter registered_outputs 	= BUS16:11111 BUS1:11111
// Parameter global_signal_count 	= 4
// Parameter control_busname 	= BUS1
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

///////////////////////////////////////////////////////////////////
// CGRA memory tile generator with SBs CBs
//
//////////////////////////////////////////////////////////////////

// bus_config (_GENESIS2_INHERITANCE_PRIORITY_) = BUS16:16b#1_1:1_1:1_1:1_1:1_1 BUS1:1b#1_1:1_1:1_1:1_1:1_1
//
// all_segments_for_all_tiles (_GENESIS2_DECLARATION_PRIORITY_) = 1
//
// global_signal_count (_GENESIS2_INHERITANCE_PRIORITY_) = 4
//
// gen_mem_for_busname (_GENESIS2_INHERITANCE_PRIORITY_) = BUS16
//
// control_busname (_GENESIS2_INHERITANCE_PRIORITY_) = BUS1
//
// ddepth (_GENESIS2_INHERITANCE_PRIORITY_) = 0x400
//

// sides (_GENESIS2_DECLARATION_PRIORITY_) = 4
//
// feedthrough_outputs (_GENESIS2_INHERITANCE_PRIORITY_) = BUS16:00000 BUS1:00000
//
// registered_outputs (_GENESIS2_INHERITANCE_PRIORITY_) = BUS16:11111 BUS1:11111
//
// is_bidi (_GENESIS2_DECLARATION_PRIORITY_) = 0
//
// sb_fs (_GENESIS2_INHERITANCE_PRIORITY_) = 10000#10000#10000
//

// cb_connections (_GENESIS2_INHERITANCE_PRIORITY_) = 0xa1b01d4b1c7
//

// mem_tile_height (_GENESIS2_DECLARATION_PRIORITY_) = 1
//

// SHIFT_REG_LEN (_GENESIS2_DECLARATION_PRIORITY_) = 0
//


module memory_tile_unq1(
clk_in,
config_addr,
config_data,
config_write,
config_read,
out_0_BUS1_0_0,
in_0_BUS1_0_0,
out_0_BUS1_0_1,
in_0_BUS1_0_1,
out_0_BUS1_0_2,
in_0_BUS1_0_2,
out_0_BUS1_0_3,
in_0_BUS1_0_3,
out_0_BUS1_0_4,
in_0_BUS1_0_4,
out_0_BUS1_1_0,
in_0_BUS1_1_0,
out_0_BUS1_1_1,
in_0_BUS1_1_1,
out_0_BUS1_1_2,
in_0_BUS1_1_2,
out_0_BUS1_1_3,
in_0_BUS1_1_3,
out_0_BUS1_1_4,
in_0_BUS1_1_4,
out_0_BUS1_2_0,
in_0_BUS1_2_0,
out_0_BUS1_2_1,
in_0_BUS1_2_1,
out_0_BUS1_2_2,
in_0_BUS1_2_2,
out_0_BUS1_2_3,
in_0_BUS1_2_3,
out_0_BUS1_2_4,
in_0_BUS1_2_4,
out_0_BUS1_3_0,
in_0_BUS1_3_0,
out_0_BUS1_3_1,
in_0_BUS1_3_1,
out_0_BUS1_3_2,
in_0_BUS1_3_2,
out_0_BUS1_3_3,
in_0_BUS1_3_3,
out_0_BUS1_3_4,
in_0_BUS1_3_4,
out_0_BUS16_0_0,
in_0_BUS16_0_0,
out_0_BUS16_0_1,
in_0_BUS16_0_1,
out_0_BUS16_0_2,
in_0_BUS16_0_2,
out_0_BUS16_0_3,
in_0_BUS16_0_3,
out_0_BUS16_0_4,
in_0_BUS16_0_4,
out_0_BUS16_1_0,
in_0_BUS16_1_0,
out_0_BUS16_1_1,
in_0_BUS16_1_1,
out_0_BUS16_1_2,
in_0_BUS16_1_2,
out_0_BUS16_1_3,
in_0_BUS16_1_3,
out_0_BUS16_1_4,
in_0_BUS16_1_4,
out_0_BUS16_2_0,
in_0_BUS16_2_0,
out_0_BUS16_2_1,
in_0_BUS16_2_1,
out_0_BUS16_2_2,
in_0_BUS16_2_2,
out_0_BUS16_2_3,
in_0_BUS16_2_3,
out_0_BUS16_2_4,
in_0_BUS16_2_4,
out_0_BUS16_3_0,
in_0_BUS16_3_0,
out_0_BUS16_3_1,
in_0_BUS16_3_1,
out_0_BUS16_3_2,
in_0_BUS16_3_2,
out_0_BUS16_3_3,
in_0_BUS16_3_3,
out_0_BUS16_3_4,
in_0_BUS16_3_4,
gin_0,
gin_1,
gin_2,
gin_3,
gout,
chain_in,
chain_out,
chain_valid_out,
chain_wen_in,
reset,
tile_id,
read_data
);

  input clk_in;
  input [31:0] config_addr;
  input [31:0] config_data;
  input chain_wen_in;
  output chain_valid_out;
  output [0:0] out_0_BUS1_0_0;
  input [0:0] in_0_BUS1_0_0;
  output [0:0] out_0_BUS1_0_1;
  input [0:0] in_0_BUS1_0_1;
  output [0:0] out_0_BUS1_0_2;
  input [0:0] in_0_BUS1_0_2;
  output [0:0] out_0_BUS1_0_3;
  input [0:0] in_0_BUS1_0_3;
  output [0:0] out_0_BUS1_0_4;
  input [0:0] in_0_BUS1_0_4;
  output [0:0] out_0_BUS1_1_0;
  input [0:0] in_0_BUS1_1_0;
  output [0:0] out_0_BUS1_1_1;
  input [0:0] in_0_BUS1_1_1;
  output [0:0] out_0_BUS1_1_2;
  input [0:0] in_0_BUS1_1_2;
  output [0:0] out_0_BUS1_1_3;
  input [0:0] in_0_BUS1_1_3;
  output [0:0] out_0_BUS1_1_4;
  input [0:0] in_0_BUS1_1_4;
  output [0:0] out_0_BUS1_2_0;
  input [0:0] in_0_BUS1_2_0;
  output [0:0] out_0_BUS1_2_1;
  input [0:0] in_0_BUS1_2_1;
  output [0:0] out_0_BUS1_2_2;
  input [0:0] in_0_BUS1_2_2;
  output [0:0] out_0_BUS1_2_3;
  input [0:0] in_0_BUS1_2_3;
  output [0:0] out_0_BUS1_2_4;
  input [0:0] in_0_BUS1_2_4;
  output [0:0] out_0_BUS1_3_0;
  input [0:0] in_0_BUS1_3_0;
  output [0:0] out_0_BUS1_3_1;
  input [0:0] in_0_BUS1_3_1;
  output [0:0] out_0_BUS1_3_2;
  input [0:0] in_0_BUS1_3_2;
  output [0:0] out_0_BUS1_3_3;
  input [0:0] in_0_BUS1_3_3;
  output [0:0] out_0_BUS1_3_4;
  input [0:0] in_0_BUS1_3_4;
  output [15:0] out_0_BUS16_0_0;
  input [15:0] in_0_BUS16_0_0;
  output [15:0] out_0_BUS16_0_1;
  input [15:0] in_0_BUS16_0_1;
  output [15:0] out_0_BUS16_0_2;
  input [15:0] in_0_BUS16_0_2;
  output [15:0] out_0_BUS16_0_3;
  input [15:0] in_0_BUS16_0_3;
  output [15:0] out_0_BUS16_0_4;
  input [15:0] in_0_BUS16_0_4;
  output [15:0] out_0_BUS16_1_0;
  input [15:0] in_0_BUS16_1_0;
  output [15:0] out_0_BUS16_1_1;
  input [15:0] in_0_BUS16_1_1;
  output [15:0] out_0_BUS16_1_2;
  input [15:0] in_0_BUS16_1_2;
  output [15:0] out_0_BUS16_1_3;
  input [15:0] in_0_BUS16_1_3;
  output [15:0] out_0_BUS16_1_4;
  input [15:0] in_0_BUS16_1_4;
  output [15:0] out_0_BUS16_2_0;
  input [15:0] in_0_BUS16_2_0;
  output [15:0] out_0_BUS16_2_1;
  input [15:0] in_0_BUS16_2_1;
  output [15:0] out_0_BUS16_2_2;
  input [15:0] in_0_BUS16_2_2;
  output [15:0] out_0_BUS16_2_3;
  input [15:0] in_0_BUS16_2_3;
  output [15:0] out_0_BUS16_2_4;
  input [15:0] in_0_BUS16_2_4;
  output [15:0] out_0_BUS16_3_0;
  input [15:0] in_0_BUS16_3_0;
  output [15:0] out_0_BUS16_3_1;
  input [15:0] in_0_BUS16_3_1;
  output [15:0] out_0_BUS16_3_2;
  input [15:0] in_0_BUS16_3_2;
  output [15:0] out_0_BUS16_3_3;
  input [15:0] in_0_BUS16_3_3;
  output [15:0] out_0_BUS16_3_4;
  input [15:0] in_0_BUS16_3_4;
  input gin_0;
  input gin_1;
  input gin_2;
  input gin_3;
  output reg gout;
  input [15:0] chain_in;
  output [15:0] chain_out;
  input [15:0] tile_id;
  input reset;
  input config_read;
  input config_write;
  output reg [31:0] read_data;
//  wire clk;
  wire cg_en;
  wire clk_en;


  reg config_en_sb_0_BUS1;
  always @(*) begin
    if (reset) begin
       config_en_sb_0_BUS1 = 1'b0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd0)&&config_write) begin
         config_en_sb_0_BUS1 = 1'b1;
       end else begin
         config_en_sb_0_BUS1 = 1'b0;
       end
    end
  end
  reg config_en_sb_0_BUS16;
  always @(*) begin
    if (reset) begin
       config_en_sb_0_BUS16 = 1'b0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd1)&&config_write) begin
         config_en_sb_0_BUS16 = 1'b1;
       end else begin
         config_en_sb_0_BUS16 = 1'b0;
       end
    end
  end

  reg config_en_mem;
  always @(*) begin
    if (reset) begin
       config_en_mem = 1'b0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd2)&&config_write) begin
         config_en_mem = 1'b1;
       end else begin
         config_en_mem = 1'b0;
       end
    end
  end

  reg [3:0] config_en_sram;
  always @(*) begin
    if(reset) begin
      config_en_sram[0] = 1'b0;
    end
    else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd3) && (config_read | config_write)) begin
         config_en_sram[0] = 1'b1;
       end 
       else begin
         config_en_sram[0] = 1'b0;
       end
    end
  end
  always @(*) begin
    if(reset) begin
      config_en_sram[1] = 1'b0;
    end
    else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd4) && (config_read | config_write)) begin
         config_en_sram[1] = 1'b1;
       end 
       else begin
         config_en_sram[1] = 1'b0;
       end
    end
  end
  always @(*) begin
    if(reset) begin
      config_en_sram[2] = 1'b0;
    end
    else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd5) && (config_read | config_write)) begin
         config_en_sram[2] = 1'b1;
       end 
       else begin
         config_en_sram[2] = 1'b0;
       end
    end
  end
  always @(*) begin
    if(reset) begin
      config_en_sram[3] = 1'b0;
    end
    else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd6) && (config_read | config_write)) begin
         config_en_sram[3] = 1'b1;
       end 
       else begin
         config_en_sram[3] = 1'b0;
       end
    end
  end

  reg config_en_linebuf;
  always @(*) begin
    if (reset) begin
       config_en_linebuf = 1'b0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd7)&&config_write) begin
         config_en_linebuf = 1'b1;
       end else begin
         config_en_linebuf = 1'b0;
       end
    end
  end

  reg [1:0] gout_sel;
  always @(posedge clk_in or posedge reset) begin
    if (reset==1'b1) begin
       gout_sel = 2'd0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd8)&&config_write) begin
         gout_sel  = config_data[1:0];
       end
    end
  end
     wire [15:0] rdata;
  wire valid;
  wire almost_full;
  wire almost_empty;
   wire [0:0] sb_wire_out_0_BUS1_0_0;
   wire [0:0] sb_wire_in_0_BUS1_0_0;
   wire [0:0] sb_wire_out_0_BUS1_0_1;
   wire [0:0] sb_wire_in_0_BUS1_0_1;
   wire [0:0] sb_wire_out_0_BUS1_0_2;
   wire [0:0] sb_wire_in_0_BUS1_0_2;
   wire [0:0] sb_wire_out_0_BUS1_0_3;
   wire [0:0] sb_wire_in_0_BUS1_0_3;
   wire [0:0] sb_wire_out_0_BUS1_0_4;
   wire [0:0] sb_wire_in_0_BUS1_0_4;
   wire [0:0] sb_wire_out_0_BUS1_1_0;
   wire [0:0] sb_wire_in_0_BUS1_1_0;
   wire [0:0] sb_wire_out_0_BUS1_1_1;
   wire [0:0] sb_wire_in_0_BUS1_1_1;
   wire [0:0] sb_wire_out_0_BUS1_1_2;
   wire [0:0] sb_wire_in_0_BUS1_1_2;
   wire [0:0] sb_wire_out_0_BUS1_1_3;
   wire [0:0] sb_wire_in_0_BUS1_1_3;
   wire [0:0] sb_wire_out_0_BUS1_1_4;
   wire [0:0] sb_wire_in_0_BUS1_1_4;
   wire [0:0] sb_wire_out_0_BUS1_2_0;
   wire [0:0] sb_wire_in_0_BUS1_2_0;
   wire [0:0] sb_wire_out_0_BUS1_2_1;
   wire [0:0] sb_wire_in_0_BUS1_2_1;
   wire [0:0] sb_wire_out_0_BUS1_2_2;
   wire [0:0] sb_wire_in_0_BUS1_2_2;
   wire [0:0] sb_wire_out_0_BUS1_2_3;
   wire [0:0] sb_wire_in_0_BUS1_2_3;
   wire [0:0] sb_wire_out_0_BUS1_2_4;
   wire [0:0] sb_wire_in_0_BUS1_2_4;
   wire [0:0] sb_wire_out_0_BUS1_3_0;
   wire [0:0] sb_wire_in_0_BUS1_3_0;
   wire [0:0] sb_wire_out_0_BUS1_3_1;
   wire [0:0] sb_wire_in_0_BUS1_3_1;
   wire [0:0] sb_wire_out_0_BUS1_3_2;
   wire [0:0] sb_wire_in_0_BUS1_3_2;
   wire [0:0] sb_wire_out_0_BUS1_3_3;
   wire [0:0] sb_wire_in_0_BUS1_3_3;
   wire [0:0] sb_wire_out_0_BUS1_3_4;
   wire [0:0] sb_wire_in_0_BUS1_3_4;
   wire [15:0] sb_wire_out_0_BUS16_0_0;
   wire [15:0] sb_wire_in_0_BUS16_0_0;
   wire [15:0] sb_wire_out_0_BUS16_0_1;
   wire [15:0] sb_wire_in_0_BUS16_0_1;
   wire [15:0] sb_wire_out_0_BUS16_0_2;
   wire [15:0] sb_wire_in_0_BUS16_0_2;
   wire [15:0] sb_wire_out_0_BUS16_0_3;
   wire [15:0] sb_wire_in_0_BUS16_0_3;
   wire [15:0] sb_wire_out_0_BUS16_0_4;
   wire [15:0] sb_wire_in_0_BUS16_0_4;
   wire [15:0] sb_wire_out_0_BUS16_1_0;
   wire [15:0] sb_wire_in_0_BUS16_1_0;
   wire [15:0] sb_wire_out_0_BUS16_1_1;
   wire [15:0] sb_wire_in_0_BUS16_1_1;
   wire [15:0] sb_wire_out_0_BUS16_1_2;
   wire [15:0] sb_wire_in_0_BUS16_1_2;
   wire [15:0] sb_wire_out_0_BUS16_1_3;
   wire [15:0] sb_wire_in_0_BUS16_1_3;
   wire [15:0] sb_wire_out_0_BUS16_1_4;
   wire [15:0] sb_wire_in_0_BUS16_1_4;
   wire [15:0] sb_wire_out_0_BUS16_2_0;
   wire [15:0] sb_wire_in_0_BUS16_2_0;
   wire [15:0] sb_wire_out_0_BUS16_2_1;
   wire [15:0] sb_wire_in_0_BUS16_2_1;
   wire [15:0] sb_wire_out_0_BUS16_2_2;
   wire [15:0] sb_wire_in_0_BUS16_2_2;
   wire [15:0] sb_wire_out_0_BUS16_2_3;
   wire [15:0] sb_wire_in_0_BUS16_2_3;
   wire [15:0] sb_wire_out_0_BUS16_2_4;
   wire [15:0] sb_wire_in_0_BUS16_2_4;
   wire [15:0] sb_wire_out_0_BUS16_3_0;
   wire [15:0] sb_wire_in_0_BUS16_3_0;
   wire [15:0] sb_wire_out_0_BUS16_3_1;
   wire [15:0] sb_wire_in_0_BUS16_3_1;
   wire [15:0] sb_wire_out_0_BUS16_3_2;
   wire [15:0] sb_wire_in_0_BUS16_3_2;
   wire [15:0] sb_wire_out_0_BUS16_3_3;
   wire [15:0] sb_wire_in_0_BUS16_3_3;
   wire [15:0] sb_wire_out_0_BUS16_3_4;
   wire [15:0] sb_wire_in_0_BUS16_3_4;







  reg config_en_cb_wdata;
  always @(*) begin
    if (reset) begin
       config_en_cb_wdata = 1'b0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd9)&&config_write) begin
         config_en_cb_wdata = 1'b1;
       end else begin
         config_en_cb_wdata = 1'b0;
       end
    end
  end
  wire [31:0] read_data_cb_wdata;

  wire [15:0] wdata;
  cb_unq1  cb_wdata
  (
    .clk(clk_in),
    .reset(reset),
    .out(wdata),
    .in_0(in_0_BUS16_2_0),
    .in_1(in_0_BUS16_2_1),
    .in_2(in_0_BUS16_2_2),
    .in_3(in_0_BUS16_2_3),
    .in_4(in_0_BUS16_2_4),
    .in_5(out_0_BUS16_2_0),
    .in_6(out_0_BUS16_2_1),
    .in_7(out_0_BUS16_2_2),
    .in_8(out_0_BUS16_2_3),
    .in_9(out_0_BUS16_2_4),
    .config_addr(config_addr),
    .config_data(config_data),
    .config_en(config_en_cb_wdata),
    .read_data(read_data_cb_wdata)
  );
  reg config_en_cb_addr;
  always @(*) begin
    if (reset) begin
       config_en_cb_addr = 1'b0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd10)&&config_write) begin
         config_en_cb_addr = 1'b1;
       end else begin
         config_en_cb_addr = 1'b0;
       end
    end
  end
  wire [31:0] read_data_cb_addr;

  wire [15:0] addr;
  cb_unq1  cb_addr
  (
    .clk(clk_in),
    .reset(reset),
    .out(addr),
    .in_0(in_0_BUS16_2_0),
    .in_1(in_0_BUS16_2_1),
    .in_2(in_0_BUS16_2_2),
    .in_3(in_0_BUS16_2_3),
    .in_4(in_0_BUS16_2_4),
    .in_5(out_0_BUS16_2_0),
    .in_6(out_0_BUS16_2_1),
    .in_7(out_0_BUS16_2_2),
    .in_8(out_0_BUS16_2_3),
    .in_9(out_0_BUS16_2_4),
    .config_addr(config_addr),
    .config_data(config_data),
    .config_en(config_en_cb_addr),
    .read_data(read_data_cb_addr)
  );
  reg config_en_cb_ren;
  always @(*) begin
    if (reset) begin
       config_en_cb_ren = 1'b0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd11)&&config_write) begin
         config_en_cb_ren = 1'b1;
       end else begin
         config_en_cb_ren = 1'b0;
       end
    end
  end
  wire [31:0] read_data_cb_ren;

  wire ren;
  cb_unq2  cb_ren
  (
    .clk(clk_in),
    .reset(reset),
    .out(ren),
    .in_0(in_0_BUS1_2_0),
    .in_1(in_0_BUS1_2_1),
    .in_2(in_0_BUS1_2_2),
    .in_3(in_0_BUS1_2_3),
    .in_4(in_0_BUS1_2_4),
    .in_5(out_0_BUS1_2_0),
    .in_6(out_0_BUS1_2_1),
    .in_7(out_0_BUS1_2_2),
    .in_8(out_0_BUS1_2_3),
    .in_9(out_0_BUS1_2_4),
    .in_10(gin_0),
    .in_11(gin_1),
    .in_12(gin_2),
    .in_13(gin_3),
    .config_addr(config_addr),
    .config_data(config_data),
    .config_en(config_en_cb_ren),
    .read_data(read_data_cb_ren)
  );
  reg config_en_cb_wen;
  always @(*) begin
    if (reset) begin
       config_en_cb_wen = 1'b0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd12)&&config_write) begin
         config_en_cb_wen = 1'b1;
       end else begin
         config_en_cb_wen = 1'b0;
       end
    end
  end
  wire [31:0] read_data_cb_wen;

  wire wen;
  cb_unq2  cb_wen
  (
    .clk(clk_in),
    .reset(reset),
    .out(wen),
    .in_0(in_0_BUS1_2_0),
    .in_1(in_0_BUS1_2_1),
    .in_2(in_0_BUS1_2_2),
    .in_3(in_0_BUS1_2_3),
    .in_4(in_0_BUS1_2_4),
    .in_5(out_0_BUS1_2_0),
    .in_6(out_0_BUS1_2_1),
    .in_7(out_0_BUS1_2_2),
    .in_8(out_0_BUS1_2_3),
    .in_9(out_0_BUS1_2_4),
    .in_10(gin_0),
    .in_11(gin_1),
    .in_12(gin_2),
    .in_13(gin_3),
    .config_addr(config_addr),
    .config_data(config_data),
    .config_en(config_en_cb_wen),
    .read_data(read_data_cb_wen)
  );
  reg config_en_cb_flush;
  always @(*) begin
    if (reset) begin
       config_en_cb_flush = 1'b0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd13)&&config_write) begin
         config_en_cb_flush = 1'b1;
       end else begin
         config_en_cb_flush = 1'b0;
       end
    end
  end
  wire [31:0] read_data_cb_flush;

  wire flush;
  cb_unq2  cb_flush
  (
    .clk(clk_in),
    .reset(reset),
    .out(flush),
    .in_0(in_0_BUS1_2_0),
    .in_1(in_0_BUS1_2_1),
    .in_2(in_0_BUS1_2_2),
    .in_3(in_0_BUS1_2_3),
    .in_4(in_0_BUS1_2_4),
    .in_5(out_0_BUS1_2_0),
    .in_6(out_0_BUS1_2_1),
    .in_7(out_0_BUS1_2_2),
    .in_8(out_0_BUS1_2_3),
    .in_9(out_0_BUS1_2_4),
    .in_10(gin_0),
    .in_11(gin_1),
    .in_12(gin_2),
    .in_13(gin_3),
    .config_addr(config_addr),
    .config_data(config_data),
    .config_en(config_en_cb_flush),
    .read_data(read_data_cb_flush)
  );
  reg config_en_cb_cg_en;
  always @(*) begin
    if (reset) begin
       config_en_cb_cg_en = 1'b0;
    end else begin
       if ((config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd14)&&config_write) begin
         config_en_cb_cg_en = 1'b1;
       end else begin
         config_en_cb_cg_en = 1'b0;
       end
    end
  end
  wire [31:0] read_data_cb_cg_en;

  cb_unq2  cb_cg_en
  (
    .clk(clk_in),
    .reset(reset),
    .out(cg_en),
    .in_0(in_0_BUS1_2_0),
    .in_1(in_0_BUS1_2_1),
    .in_2(in_0_BUS1_2_2),
    .in_3(in_0_BUS1_2_3),
    .in_4(in_0_BUS1_2_4),
    .in_5(out_0_BUS1_2_0),
    .in_6(out_0_BUS1_2_1),
    .in_7(out_0_BUS1_2_2),
    .in_8(out_0_BUS1_2_3),
    .in_9(out_0_BUS1_2_4),
    .in_10(gin_0),
    .in_11(gin_1),
    .in_12(gin_2),
    .in_13(gin_3),
    .config_addr(config_addr),
    .config_data(config_data),
    .config_en(config_en_cb_cg_en),
    .read_data(read_data_cb_cg_en)
  );

  assign clk_en = ~cg_en;
wire [31:0] read_data_sb_0_BUS1;    
  sb_unq3  sb_inst_busBUS1_row0
  (
    .clk(clk_in),
    .clk_en(clk_en),
    .reset(reset),
    .pe_output_0(valid),
    .pe_output_1(almost_full),
    .pe_output_2(almost_empty),
    .out_0_0(sb_wire_out_0_BUS1_0_0),
    .in_0_0(sb_wire_in_0_BUS1_0_0),      
    .out_0_1(sb_wire_out_0_BUS1_0_1),
    .in_0_1(sb_wire_in_0_BUS1_0_1),      
    .out_0_2(sb_wire_out_0_BUS1_0_2),
    .in_0_2(sb_wire_in_0_BUS1_0_2),      
    .out_0_3(sb_wire_out_0_BUS1_0_3),
    .in_0_3(sb_wire_in_0_BUS1_0_3),      
    .out_0_4(sb_wire_out_0_BUS1_0_4),
    .in_0_4(sb_wire_in_0_BUS1_0_4),      
    .out_1_0(sb_wire_out_0_BUS1_1_0),
    .in_1_0(sb_wire_in_0_BUS1_1_0),      
    .out_1_1(sb_wire_out_0_BUS1_1_1),
    .in_1_1(sb_wire_in_0_BUS1_1_1),      
    .out_1_2(sb_wire_out_0_BUS1_1_2),
    .in_1_2(sb_wire_in_0_BUS1_1_2),      
    .out_1_3(sb_wire_out_0_BUS1_1_3),
    .in_1_3(sb_wire_in_0_BUS1_1_3),      
    .out_1_4(sb_wire_out_0_BUS1_1_4),
    .in_1_4(sb_wire_in_0_BUS1_1_4),      
    .out_2_0(sb_wire_out_0_BUS1_2_0),
    .in_2_0(sb_wire_in_0_BUS1_2_0),      
    .out_2_1(sb_wire_out_0_BUS1_2_1),
    .in_2_1(sb_wire_in_0_BUS1_2_1),      
    .out_2_2(sb_wire_out_0_BUS1_2_2),
    .in_2_2(sb_wire_in_0_BUS1_2_2),      
    .out_2_3(sb_wire_out_0_BUS1_2_3),
    .in_2_3(sb_wire_in_0_BUS1_2_3),      
    .out_2_4(sb_wire_out_0_BUS1_2_4),
    .in_2_4(sb_wire_in_0_BUS1_2_4),      
    .out_3_0(sb_wire_out_0_BUS1_3_0),
    .in_3_0(sb_wire_in_0_BUS1_3_0),      
    .out_3_1(sb_wire_out_0_BUS1_3_1),
    .in_3_1(sb_wire_in_0_BUS1_3_1),      
    .out_3_2(sb_wire_out_0_BUS1_3_2),
    .in_3_2(sb_wire_in_0_BUS1_3_2),      
    .out_3_3(sb_wire_out_0_BUS1_3_3),
    .in_3_3(sb_wire_in_0_BUS1_3_3),      
    .out_3_4(sb_wire_out_0_BUS1_3_4),
    .in_3_4(sb_wire_in_0_BUS1_3_4),      
    .config_addr(config_addr),
    .config_data(config_data),
    .config_en(config_en_sb_0_BUS1),
    .read_data(read_data_sb_0_BUS1)
  );
wire [31:0] read_data_sb_0_BUS16;    
  sb_unq1  sb_inst_busBUS16_row0
  (
    .clk(clk_in),
    .clk_en(clk_en),
    .reset(reset),
    .pe_output_0(rdata),
    .out_0_0(sb_wire_out_0_BUS16_0_0),
    .in_0_0(sb_wire_in_0_BUS16_0_0),      
    .out_0_1(sb_wire_out_0_BUS16_0_1),
    .in_0_1(sb_wire_in_0_BUS16_0_1),      
    .out_0_2(sb_wire_out_0_BUS16_0_2),
    .in_0_2(sb_wire_in_0_BUS16_0_2),      
    .out_0_3(sb_wire_out_0_BUS16_0_3),
    .in_0_3(sb_wire_in_0_BUS16_0_3),      
    .out_0_4(sb_wire_out_0_BUS16_0_4),
    .in_0_4(sb_wire_in_0_BUS16_0_4),      
    .out_1_0(sb_wire_out_0_BUS16_1_0),
    .in_1_0(sb_wire_in_0_BUS16_1_0),      
    .out_1_1(sb_wire_out_0_BUS16_1_1),
    .in_1_1(sb_wire_in_0_BUS16_1_1),      
    .out_1_2(sb_wire_out_0_BUS16_1_2),
    .in_1_2(sb_wire_in_0_BUS16_1_2),      
    .out_1_3(sb_wire_out_0_BUS16_1_3),
    .in_1_3(sb_wire_in_0_BUS16_1_3),      
    .out_1_4(sb_wire_out_0_BUS16_1_4),
    .in_1_4(sb_wire_in_0_BUS16_1_4),      
    .out_2_0(sb_wire_out_0_BUS16_2_0),
    .in_2_0(sb_wire_in_0_BUS16_2_0),      
    .out_2_1(sb_wire_out_0_BUS16_2_1),
    .in_2_1(sb_wire_in_0_BUS16_2_1),      
    .out_2_2(sb_wire_out_0_BUS16_2_2),
    .in_2_2(sb_wire_in_0_BUS16_2_2),      
    .out_2_3(sb_wire_out_0_BUS16_2_3),
    .in_2_3(sb_wire_in_0_BUS16_2_3),      
    .out_2_4(sb_wire_out_0_BUS16_2_4),
    .in_2_4(sb_wire_in_0_BUS16_2_4),      
    .out_3_0(sb_wire_out_0_BUS16_3_0),
    .in_3_0(sb_wire_in_0_BUS16_3_0),      
    .out_3_1(sb_wire_out_0_BUS16_3_1),
    .in_3_1(sb_wire_in_0_BUS16_3_1),      
    .out_3_2(sb_wire_out_0_BUS16_3_2),
    .in_3_2(sb_wire_in_0_BUS16_3_2),      
    .out_3_3(sb_wire_out_0_BUS16_3_3),
    .in_3_3(sb_wire_in_0_BUS16_3_3),      
    .out_3_4(sb_wire_out_0_BUS16_3_4),
    .in_3_4(sb_wire_in_0_BUS16_3_4),      
    .config_addr(config_addr),
    .config_data(config_data),
    .config_en(config_en_sb_0_BUS16),
    .read_data(read_data_sb_0_BUS16)
  );

      assign  out_0_BUS1_0_0 = sb_wire_out_0_BUS1_0_0;
      assign  sb_wire_in_0_BUS1_0_0 = in_0_BUS1_0_0;
      assign  out_0_BUS1_0_1 = sb_wire_out_0_BUS1_0_1;
      assign  sb_wire_in_0_BUS1_0_1 = in_0_BUS1_0_1;
      assign  out_0_BUS1_0_2 = sb_wire_out_0_BUS1_0_2;
      assign  sb_wire_in_0_BUS1_0_2 = in_0_BUS1_0_2;
      assign  out_0_BUS1_0_3 = sb_wire_out_0_BUS1_0_3;
      assign  sb_wire_in_0_BUS1_0_3 = in_0_BUS1_0_3;
      assign  out_0_BUS1_0_4 = sb_wire_out_0_BUS1_0_4;
      assign  sb_wire_in_0_BUS1_0_4 = in_0_BUS1_0_4;
      assign  out_0_BUS1_1_0 = sb_wire_out_0_BUS1_1_0;
      assign  sb_wire_in_0_BUS1_1_0 = in_0_BUS1_1_0;
      assign  out_0_BUS1_1_1 = sb_wire_out_0_BUS1_1_1;
      assign  sb_wire_in_0_BUS1_1_1 = in_0_BUS1_1_1;
      assign  out_0_BUS1_1_2 = sb_wire_out_0_BUS1_1_2;
      assign  sb_wire_in_0_BUS1_1_2 = in_0_BUS1_1_2;
      assign  out_0_BUS1_1_3 = sb_wire_out_0_BUS1_1_3;
      assign  sb_wire_in_0_BUS1_1_3 = in_0_BUS1_1_3;
      assign  out_0_BUS1_1_4 = sb_wire_out_0_BUS1_1_4;
      assign  sb_wire_in_0_BUS1_1_4 = in_0_BUS1_1_4;
      assign  out_0_BUS1_2_0 = sb_wire_out_0_BUS1_2_0;
      assign  sb_wire_in_0_BUS1_2_0 = in_0_BUS1_2_0;
      assign  out_0_BUS1_2_1 = sb_wire_out_0_BUS1_2_1;
      assign  sb_wire_in_0_BUS1_2_1 = in_0_BUS1_2_1;
      assign  out_0_BUS1_2_2 = sb_wire_out_0_BUS1_2_2;
      assign  sb_wire_in_0_BUS1_2_2 = in_0_BUS1_2_2;
      assign  out_0_BUS1_2_3 = sb_wire_out_0_BUS1_2_3;
      assign  sb_wire_in_0_BUS1_2_3 = in_0_BUS1_2_3;
      assign  out_0_BUS1_2_4 = sb_wire_out_0_BUS1_2_4;
      assign  sb_wire_in_0_BUS1_2_4 = in_0_BUS1_2_4;
      assign  out_0_BUS1_3_0 = sb_wire_out_0_BUS1_3_0;
      assign  sb_wire_in_0_BUS1_3_0 = in_0_BUS1_3_0;
      assign  out_0_BUS1_3_1 = sb_wire_out_0_BUS1_3_1;
      assign  sb_wire_in_0_BUS1_3_1 = in_0_BUS1_3_1;
      assign  out_0_BUS1_3_2 = sb_wire_out_0_BUS1_3_2;
      assign  sb_wire_in_0_BUS1_3_2 = in_0_BUS1_3_2;
      assign  out_0_BUS1_3_3 = sb_wire_out_0_BUS1_3_3;
      assign  sb_wire_in_0_BUS1_3_3 = in_0_BUS1_3_3;
      assign  out_0_BUS1_3_4 = sb_wire_out_0_BUS1_3_4;
      assign  sb_wire_in_0_BUS1_3_4 = in_0_BUS1_3_4;
      assign  out_0_BUS16_0_0 = sb_wire_out_0_BUS16_0_0;
      assign  sb_wire_in_0_BUS16_0_0 = in_0_BUS16_0_0;
      assign  out_0_BUS16_0_1 = sb_wire_out_0_BUS16_0_1;
      assign  sb_wire_in_0_BUS16_0_1 = in_0_BUS16_0_1;
      assign  out_0_BUS16_0_2 = sb_wire_out_0_BUS16_0_2;
      assign  sb_wire_in_0_BUS16_0_2 = in_0_BUS16_0_2;
      assign  out_0_BUS16_0_3 = sb_wire_out_0_BUS16_0_3;
      assign  sb_wire_in_0_BUS16_0_3 = in_0_BUS16_0_3;
      assign  out_0_BUS16_0_4 = sb_wire_out_0_BUS16_0_4;
      assign  sb_wire_in_0_BUS16_0_4 = in_0_BUS16_0_4;
      assign  out_0_BUS16_1_0 = sb_wire_out_0_BUS16_1_0;
      assign  sb_wire_in_0_BUS16_1_0 = in_0_BUS16_1_0;
      assign  out_0_BUS16_1_1 = sb_wire_out_0_BUS16_1_1;
      assign  sb_wire_in_0_BUS16_1_1 = in_0_BUS16_1_1;
      assign  out_0_BUS16_1_2 = sb_wire_out_0_BUS16_1_2;
      assign  sb_wire_in_0_BUS16_1_2 = in_0_BUS16_1_2;
      assign  out_0_BUS16_1_3 = sb_wire_out_0_BUS16_1_3;
      assign  sb_wire_in_0_BUS16_1_3 = in_0_BUS16_1_3;
      assign  out_0_BUS16_1_4 = sb_wire_out_0_BUS16_1_4;
      assign  sb_wire_in_0_BUS16_1_4 = in_0_BUS16_1_4;
      assign  out_0_BUS16_2_0 = sb_wire_out_0_BUS16_2_0;
      assign  sb_wire_in_0_BUS16_2_0 = in_0_BUS16_2_0;
      assign  out_0_BUS16_2_1 = sb_wire_out_0_BUS16_2_1;
      assign  sb_wire_in_0_BUS16_2_1 = in_0_BUS16_2_1;
      assign  out_0_BUS16_2_2 = sb_wire_out_0_BUS16_2_2;
      assign  sb_wire_in_0_BUS16_2_2 = in_0_BUS16_2_2;
      assign  out_0_BUS16_2_3 = sb_wire_out_0_BUS16_2_3;
      assign  sb_wire_in_0_BUS16_2_3 = in_0_BUS16_2_3;
      assign  out_0_BUS16_2_4 = sb_wire_out_0_BUS16_2_4;
      assign  sb_wire_in_0_BUS16_2_4 = in_0_BUS16_2_4;
      assign  out_0_BUS16_3_0 = sb_wire_out_0_BUS16_3_0;
      assign  sb_wire_in_0_BUS16_3_0 = in_0_BUS16_3_0;
      assign  out_0_BUS16_3_1 = sb_wire_out_0_BUS16_3_1;
      assign  sb_wire_in_0_BUS16_3_1 = in_0_BUS16_3_1;
      assign  out_0_BUS16_3_2 = sb_wire_out_0_BUS16_3_2;
      assign  sb_wire_in_0_BUS16_3_2 = in_0_BUS16_3_2;
      assign  out_0_BUS16_3_3 = sb_wire_out_0_BUS16_3_3;
      assign  sb_wire_in_0_BUS16_3_3 = in_0_BUS16_3_3;
      assign  out_0_BUS16_3_4 = sb_wire_out_0_BUS16_3_4;
      assign  sb_wire_in_0_BUS16_3_4 = in_0_BUS16_3_4;

  always @(*) begin
    case (gout_sel)
      default: gout = 1'b0;
      2'd0: gout = 1'b0;
      2'd1: gout = valid;
      2'd2: gout = almost_full;
      2'd3: gout = almost_empty;
    endcase
  end


  //assign clk = clk_in & clk_en;





wire [31:0] read_data_mem;
wire [31:0] read_data_sram;
wire [31:0] read_data_linebuf;
  memory_core_unq1  memory_core
  (
      .clk_in(clk_in),
      .clk_en(clk_en),
      .reset(reset),
      .flush(flush),
      .config_addr(config_addr),
      .config_data(config_data),
      .config_read(config_read),
      .config_write(config_write),
      .config_en(config_en_mem),
      .config_en_sram(config_en_sram),
      .config_en_linebuf(config_en_linebuf),
      .data_in(wdata),
      .data_out(rdata), 
      .addr_in(addr),
      .wen_in(wen),
      .ren_in(ren),
      .valid_out(valid),
      .chain_in(chain_in),
      .chain_out(chain_out),
      .chain_wen_in(chain_wen_in),
      .chain_valid_out(chain_valid_out),
      .almost_full(almost_full),
      .almost_empty(almost_empty),
      .read_data(read_data_mem),
      .read_data_sram(read_data_sram),
      .read_data_linebuf(read_data_linebuf)
   );





   always @(*) begin
           if (config_read && (config_addr[15:0]==tile_id)) begin
                   case (config_addr[23:16])
                        'd0 : read_data = read_data_sb_0_BUS1;
                        'd1 : read_data = read_data_sb_0_BUS16;
                        'd10 : read_data = read_data_cb_addr;
                        'd11 : read_data = read_data_cb_ren;
                        'd12 : read_data = read_data_cb_wen;
                        'd13 : read_data = read_data_cb_flush;
                        'd14 : read_data = read_data_cb_cg_en;
                        'd2 : read_data = read_data_mem;
                        'd3 : read_data = read_data_sram;
                        'd4 : read_data = read_data_sram;
                        'd5 : read_data = read_data_sram;
                        'd6 : read_data = read_data_sram;
                        'd7 : read_data = read_data_linebuf;
                        'd8 : read_data = gout_sel;
                        'd9 : read_data = read_data_cb_wdata;
                             default : read_data = 'd0;
                           endcase
                       end 
                       else
                               read_data = 'd0;
                       end

endmodule




