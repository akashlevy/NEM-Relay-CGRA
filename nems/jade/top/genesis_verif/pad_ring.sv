//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /Users/akashlevy/OneDrive - Levylab/Documents/Research/Hybrid-RRAM-NEMS/cgra/jade/pad_ring/pad_ring.svp
//  Source template: pad_ring
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter num_groups_per_side 	= 1
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// num_ios_per_group (_GENESIS2_DECLARATION_PRIORITY_) = 16
//
// num_groups_per_side (_GENESIS2_INHERITANCE_PRIORITY_) = 1
//
// config_addr_width (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
// config_data_width (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
// This module contains all of the io1bit and io16bit tiles in the CGRA.

module pad_ring (
  input clk_pad,
  input reset_pad,
  input tck_pad,
  input tms_pad,
  input tdi_pad,
  input trst_n_pad,
  output tdo_pad,
  input [31:0] config_data,
  input [31:0] config_addr,
  input config_read,
  input config_write,
  output clk,
  output reset,
  output tck,
  output tdi,
  output tms,
  output trst_n,
  input tdo,

  input  [15:0] f2p_wide_N_0,
  input  [15:0] f2p_1bit_N_0,
  inout  [15:0] pads_N_0,
  output [15:0] p2f_N_0,
  input  [15:0] f2p_wide_E_0,
  input  [15:0] f2p_1bit_E_0,
  inout  [15:0] pads_E_0,
  output [15:0] p2f_E_0,
  input  [15:0] f2p_wide_S_0,
  input  [15:0] f2p_1bit_S_0,
  inout  [15:0] pads_S_0,
  output [15:0] p2f_S_0,
  input  [15:0] f2p_wide_W_0,
  input  [15:0] f2p_1bit_W_0,
  inout  [15:0] pads_W_0,
  output [15:0] p2f_W_0,

  output reg [31:0] read_data
);

wire [31:0] read_data_group [3:0];


io_group_unq1  io_side_N_gr_0 (
  .clk(clk),
  .reset(reset),
  .config_data(config_data),
  .config_addr(config_addr),
  .config_read(config_read),
  .config_write(config_write),
  .f2p_wide(f2p_wide_N_0),
  .f2p_1bit(f2p_1bit_N_0),
  .pads(pads_N_0),
  .p2f(p2f_N_0),
  .read_data(read_data_group[0])
);

io_group_unq2  io_side_E_gr_0 (
  .clk(clk),
  .reset(reset),
  .config_data(config_data),
  .config_addr(config_addr),
  .config_read(config_read),
  .config_write(config_write),
  .f2p_wide(f2p_wide_E_0),
  .f2p_1bit(f2p_1bit_E_0),
  .pads(pads_E_0),
  .p2f(p2f_E_0),
  .read_data(read_data_group[1])
);

io_group_unq3  io_side_S_gr_0 (
  .clk(clk),
  .reset(reset),
  .config_data(config_data),
  .config_addr(config_addr),
  .config_read(config_read),
  .config_write(config_write),
  .f2p_wide(f2p_wide_S_0),
  .f2p_1bit(f2p_1bit_S_0),
  .pads(pads_S_0),
  .p2f(p2f_S_0),
  .read_data(read_data_group[2])
);

io_group_unq4  io_side_W_gr_0 (
  .clk(clk),
  .reset(reset),
  .config_data(config_data),
  .config_addr(config_addr),
  .config_read(config_read),
  .config_write(config_write),
  .f2p_wide(f2p_wide_W_0),
  .f2p_1bit(f2p_1bit_W_0),
  .pads(pads_W_0),
  .p2f(p2f_W_0),
  .read_data(read_data_group[3])
);

  // System Verilog equivalent: assign read_data = read_data_group.or();
always @(*) begin
  read_data = 0;
  for (integer i=0; i < 4; i++)
    read_data = read_data | read_data_group[i];
end

//Instantiate IO cells for non-configurable IOs (clk, reset, JTAG signals)
//input clk pad 
fixed_io_unq1  clk_input_cell (
  .pad(clk_pad),
  .p2f(clk)
); 

//input reset pad
fixed_io_unq1  reset_input_cell (
  .pad(reset_pad),
  .p2f(reset)
);
 
//input tck pad
fixed_io_unq1  tck_input_cell (
  .pad(tck_pad),
  .p2f(tck)
); 

//input tdi pad
fixed_io_unq1  tdi_input_cell (
  .pad(tdi_pad),
  .p2f(tdi)
); 

//input tms pad
fixed_io_unq1  tms_input_cell (
  .pad(tms_pad),
  .p2f(tms)
); 

//input trst_n pad
fixed_io_unq1  trst_n_input_cell (
  .pad(trst_n_pad),
  .p2f(trst_n)
);

//output tdo pad
fixed_io_unq2  tdo_output_cell (
  .pad(tdo_pad),
  .f2p(tdo)
); 
 
endmodule
