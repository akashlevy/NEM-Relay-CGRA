//; use POSIX;
//;
//; my $side = parameter(Name=>'side', value=>'N', 
//;   Doc=>"Which side of the chip are we on?", list=>['N','S','E','W']);
//; my $group_num = parameter(Name=>'group_num', value=>0, min=>0, step=>1);
//; my $num_ios = parameter(Name=>'num_ios', value=>16,min=>1,step=>1);
//; my $config_addr_width = parameter(Name=>'config_addr_width', val=>32, min=>1, step=>1);
//; my $config_data_width = parameter(Name=>'config_data_width', val=>32, min=>1, step=>1);
//; 
//; # my $tristate_supported = parameter(name=>'tristate_supported', val=>0, list=>[0,1]);
//; my $tristate_supported = 1;
//; if (exists $ENV{"TRISTATE_UNAVAILABLE"}) { $tristate_supported = 0; }
//; 
//; # This is to convert the direction to a side number that the rest of CGRAGenerator uses
//; my %side_to_side_num = ('N',3,  'S',1,  'E',0,  'W',2);

// io group `$group_num`

module `mname` (
  input clk,
  input reset,
  input [`$config_data_width-1`:0] config_data,
  input [`$config_addr_width-1`:0] config_addr,
  input config_read,
  input config_write,
  input [`$num_ios-1`:0] f2p_wide,
  input [`$num_ios-1`:0] f2p_1bit,
//; if ($tristate_supported) {
  inout [`$num_ios-1`:0] pads,
//; } else {
  input  [`$num_ios-1`:0] pads_in,
  output [`$num_ios-1`:0] pads_out,
//; }
  output [`$num_ios-1`:0] p2f,
  output reg [`$config_data_width-1`:0] read_data
);

wire [`$config_data_width-1`:0] read_data_tile [`$num_ios-1`:0];

//; # Given IO number (0..16n) on side N, S, E or W, return row, col of io tile
//; sub io_row_col {
//;   # parms
//;   # Note num_ios = num_ios_per_group e.g. 16
//;   my ($i, $side, $num_ios, $group_num) = @_;
//;   my ($row,$col) = (-1,-1);
//;   my $group_offset = ($num_ios * $group_num);
//; 
//;   if    ($side eq "N") { $row = 0 }                                # 0
//;   elsif ($side eq "E") { $row = $group_offset + ($num_ios - $i) }  # 16:1, 32:17, ...
//;   elsif ($side eq "W") { $row = $group_offset + (1 + $i) }         # 1:16, 17:32, ...
//;   elsif ($side eq "S") { $row = 1 + $num_ios }                     # 17
//;
//;   if    ($side eq "N") { $col = $group_offset + ($num_ios - $i) }  # 16:1, 32:17, ...
//;   elsif ($side eq "E") { $col = 1 + $num_ios; }                    # 17
//;   elsif ($side eq "W") { $col = 0; }                               # 0
//;   elsif ($side eq "S") { $col = $group_offset + (1 + $i) }         # 1..16
//;
//;   return ($row,$col);
//; }
//; sub print_io_collateral {
//;   my ($i, $id, $hex_id, $row, $col, $group_num, $side, $side_num) = @_;
//;   my $bitnum = ($i % 16);
//;   my $tracknum = 0; # Input track (used to interleave; now it's always 0).
//;   my $portside = ($side_num + 2) % 4;
//; 
//;   my @collateral = (
//; "  <tile type='io1bit' tile_addr='$hex_id' row='$row' col='$col' ".
//; "name='pads_${side}_${group_num}'>",
//; "    <io_bit>$bitnum</io_bit>",
//; "    <io_group>$group_num</io_group>",
//; "    <tri feature_address='0' reg_address='0' bitl='0' bith='0'>",
//; "        <direction sel='0'>in</direction>  <!--input-->",
//; "        <direction sel='1'>out</direction> <!--output-->",
//; "    </tri>",
//; "    <mux feature_address='0' reg_address='0' bitl='1' bith='1'>",
//; "        <src sel='0'>16</src> <!-- 16 bit mode -->",
//; "        <src sel='1'>1</src>  <!--  1 bit mode -->",
//; "    </mux>",
//; "",
//; "    <!-- input goes from pad to ALL tracks -->",
//; "    <p2f_1bit>out_1BIT_S${portside}_T0</p2f_1bit>",
//; "    <p2f_1bit>out_1BIT_S${portside}_T1</p2f_1bit>",
//; "    <p2f_1bit>out_1BIT_S${portside}_T2</p2f_1bit>",
//; "    <p2f_1bit>out_1BIT_S${portside}_T3</p2f_1bit>",
//; "    <p2f_1bit>out_1BIT_S${portside}_T4</p2f_1bit>",
//; "",
//; "    <!-- output only comes from track 0 -->",
//; "    <f2p_1bit>in_1BIT_S${portside}_T${tracknum}</f2p_1bit>");
//;
//; # Add 16-bit info if io1bit tile is LSB
//;   if ($i == 15) {
//;     push @collateral, (
//; "",
//; "    <!-- 16bit IO same exc. BUS16 instead of BUS1 -->",
//; "    <p2f_wide>out_16BIT_S${portside}_T0</p2f_wide>",
//; "    <p2f_wide>out_16BIT_S${portside}_T1</p2f_wide>",
//; "    <p2f_wide>out_16BIT_S${portside}_T2</p2f_wide>",
//; "    <p2f_wide>out_16BIT_S${portside}_T3</p2f_wide>",
//; "    <p2f_wide>out_16BIT_S${portside}_T4</p2f_wide>",
//; "    <f2p_wide>in_16BIT_S${portside}_T${tracknum}</f2p_wide>",
//; "");
//;   }
//;   push @collateral,
//; "  </tile>\n";
//; 
//;   # Print collateral as a comment in the verilog why not
//;   print "// ".join("\n// ", @collateral);
//;
//;   # Print collateral as a string in the top-level CGRA_INFO array
//;   @top::CGRA_INFO[$id] = join("\n", @collateral);
//;
//;   # no we don't do this no more (right?)
//;   # my $filename = "TILE".$self->mname();
//;   # open(TILEINFO, ">>$filename") or die "Couldn't open file $filename, $!";
//;   # print TILEINFO join("\n", @collateral);
//;   # close TILEINFO;
//; }
//;
//; # Count *DOWN* from 15 to 0 (little endian)
//; for (my $i=($num_ios-1); $i >=0; $i--) {
//;
//;   # <tile type='io1bit' tile_addr='0x2' row='0' col='2' tracks='BUS1:1 BUS16:0' name='pad_S0_T0'>
//;   my ($row,$col) = io_row_col($i, $side, $num_ios, $group_num);
//;
//;   my $id = ($row<<8) + $col;
//;   my $hex_id = sprintf("0x%04X", $id);
//;   
//;   my $io1bit_obj = generate("io1bit", "io1bit_${hex_id}", 
//;     side=>$side_to_side_num{$side}, io_group=>$group_num);
//;
//;   # Need verilog-formatted hex id e.g. "0x0110" => "16'h0110"
//;   my $vhex_id = sprintf("16'h%04X", $id);

`$io1bit_obj->instantiate()` (     // `$side`_`$group_num`[`$i`]
  .clk(clk),
  .reset(reset),
  .config_data(config_data),
  .config_addr(config_addr),
  .config_read(config_read),
  .config_write(config_write),
//;   if ($tristate_supported) {
  .pad(pads[`$i`]),
//;   } else {
  .pad_in(pads_in[`$i`]),
  .pad_out(pads_out[`$i`]),
//;   }
  .read_data(read_data_tile[`$i`]),
  .f2p_16(f2p_wide[`$i`]),
  .f2p_1(f2p_1bit[`$i`]),
  .p2f(p2f[`$i`]),
  .tile_id(`$vhex_id`)
);

//;   # $io1bit_obj = clone($io1bit_obj, "io1bit_@{[$i+1]}");
//; 
//;   my $side_num = $side_to_side_num{$side};
//;   print_io_collateral($i, $id, $hex_id, $row, $col, $group_num, $side, $side_num);
//; }

// SV equivalent: assign read_data = read_data_tile.or();
always @(*) begin
  read_data = 0;
  for (integer i=0; i < `$num_ios`; i++)
    read_data = read_data | read_data_tile[i];
end

endmodule


