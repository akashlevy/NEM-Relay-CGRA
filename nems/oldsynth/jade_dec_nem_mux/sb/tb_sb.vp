//; my $width  = parameter(Name=>'width', val=> 16, doc=>'Bus width for SB');
//; my $num_tracks = parameter(Name=>'num_tracks', val=> 16, doc=>'num_tracks Count for SB'); 
//; my $sides = parameter(Name=>'sides', val=> 4, doc=>'number of edges for a SB, 4 for a sqarish SB'); 
//; my $feedthrough_outputs = parameter(Name=>'feedthrough_outputs', val=> "02", doc=>'binary vector for feedthrough output config. Affects all sides. Expressed in hex. MSB corresponds to output 0 eg: 02 means output 7 is feedthrough. Length in bits = 0.5*num_tracks.');
//; my $registered_outputs = parameter(Name=>'registered_outputs', val=> "01", doc=>'binary vector for feedthrough output config. Affects all sides. Expressed in hex. MSB corresponds to output 0. Registering feedthrough outputs is ignored.');
//; my $pe_output_count = parameter(Name=>'pe_output_count', val=> 1, doc=>'Number of PE outputs to be muxed into outgoing driven tracks');
//; my $is_bidi = parameter(Name=>'is_bidi', val=> 0, doc=>'1 if SB pins are bidi. TBD.');

//; my $number_of_outputs = $num_tracks * 0.5;

\`timescale 1ns/1ps
module tb();
/////////////////////////////////////////////////////////
//
// Clock and reset
//
/////////////////////////////////////////////////////////
    reg clk;
    reg [3:0] reset_count;
    
    wire reset;
    
    initial begin
      clk<=1'b1;
      reset_count<=4'd0;
    end
    
    always #0.625 clk <= ~clk;
    
    always @(posedge clk) begin
      if (!(&reset_count)) begin 
        reset_count <= reset_count + 1;
      end
    end
    
    assign reset = !reset_count[3];
    
/////////////////////////////////////////////////////////
//
// Tile configuration
//
/////////////////////////////////////////////////////////

    integer    config_data_file    ; // file handler
    reg [21:0] config_addr_i;
    reg [31:0] config_data_i;
    reg [31:0] config_addr;
    reg [31:0] config_data;
    reg tile_config_done;

    initial begin
      config_addr_i <= 0;
      config_data_i <= 0;
      config_addr <= 0;
      config_data <= 0;
      tile_config_done <= 0;
    end
    \`define NULL 0
    
    initial begin
      config_data_file = $fopen("tile_config.dat", "r");
      if (config_data_file == \`NULL) begin
        $display("config_data_file handle was NULL");
        $finish;
      end
    end
    always @(posedge clk) begin
      if (!reset) begin
        $fscanf(config_data_file, "%h %h\n", config_addr_i,config_data_i); 
        if (!$feof(config_data_file)) begin
          config_addr <= config_addr_i;
          config_data <= config_data_i;
        end else begin
          tile_config_done <= 1'b1;
        end
      end
    end
/////////////////////////////////////////////////////////
//
// Data generation 
//
/////////////////////////////////////////////////////////

//; for(my $i=0; $i<$pe_output_count; $i++) {
  reg [`$width-1`:0] pe_output_`$i`;
//; }
//; for(my $i=0; $i<$sides; $i++) {
//;  for(my $j=0; $j<$number_of_outputs; $j++) {
  reg [`$width-1`:0] in_`$i`_`$j`;
  wire [`$width-1`:0] out_`$i`_`$j`;
//;  }
//; }


always @(posedge clk) begin
//; for(my $i=0; $i<$pe_output_count; $i++) {
  pe_output_`$i` <= $random;
//; }
//; for(my $i=0; $i<$sides; $i++) {
//;  for(my $j=0; $j<$number_of_outputs; $j++) {
  in_`$i`_`$j` <= $random;
//;  }
//; }
end

/////////////////////////////////////////////////////////
//
// DUT instantiation
//
/////////////////////////////////////////////////////////

sb dut (
.clk(clk),
.reset(reset),
//; for(my $i=0; $i<$pe_output_count; $i++) {
.pe_output_`$i`(pe_output_`$i`),
//; }
//; for(my $i=0; $i<$sides; $i++) {
//;  for(my $j=0; $j<$number_of_outputs; $j++) {
.out_`$i`_`$j`(out_`$i`_`$j`),
.in_`$i`_`$j`(in_`$i`_`$j`),
//;  }
//; }
.config_addr(config_addr),
.config_data(config_data),
.config_en(~tile_config_done)
);

endmodule
