//; use POSIX;
//; my $global_signal_count = parameter(Name=>'global_signal_count', val=> "4", doc=>'number of global signals supported');

module `mname` (
//;   for (my $i=0; $i<$global_signal_count; $i++) {
gin_l_`${i}`,
gin_u_`${i}`,
gout_l_`${i}`,
//;   }
gout_u,
clk,
reset,
config_addr,
config_data,
config_read,
config_write,
tile_id,
read_data
);
//;   for (my $i=0; $i<$global_signal_count; $i++) {
  input gin_l_`${i}`;
  input gin_u_`${i}`;
//;   }
//;   for (my $i=0; $i<$global_signal_count; $i++) {
  output reg gout_l_`${i}`;
//;   }
  output reg gout_u;
  input  clk;
  input  reset;
  input [31:0] config_addr;
  input [31:0] config_data;
  input config_read;
  input config_write;
  input [15:0] tile_id;
  output reg [31:0] read_data;
wire ___genesis_wire_`${global_signal_count}`;

//; my $config_bit_count = $global_signal_count;
 reg [`$config_bit_count-1`:0] config_reg;
 always @(posedge clk or posedge reset) begin
   if (reset==1'b1) begin
     config_reg <= {`$global_signal_count`'d0};
   end else begin
       if (config_write && (config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd0)&&(config_addr[31:24]==8'd0)) begin
         config_reg <= config_data[`$config_bit_count-1`:0];
       end
   end
 end
  always @(*) begin
    if (config_read && (config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd0)&&(config_addr[31:24]==8'd0)) begin
      read_data = config_reg;
    end
    else begin
      read_data = 'h0;
    end
  end
  always @(*) begin
//; my $str = "";
//; for (my $j=0;$j<$global_signal_count;$j++) {
//; $str .= "gin_l_${j} | "    
//; }
//; $str .= "1'b0";
    gout_u = `$str`;
  end

//; for (my $j=0;$j<$global_signal_count;$j++) {
  always @(*) begin
    case (config_reg[`$j`])
      1'd0: gout_l_`${j}` = gin_u_`${j}`;
      1'd1: gout_l_`${j}` = gin_l_`${j}`;
      default: gout_l_`${j}` =  gin_u_`${j}`;
    endcase
  end
//; }
endmodule
