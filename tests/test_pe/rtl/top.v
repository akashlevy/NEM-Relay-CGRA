//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11879 $ --- $Date: 2013/06/11 $   |
//	-----------------------------------------------
//	
//
//  Source file: /Users/akashlevy/OneDrive - Levylab/Documents/Research/CGRAGenerator/hardware/generator_z/top/top.vp
//  Source template: top
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
// Parameter mem_tile_height 	= 1
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------


// New Top level that contains CGRA_core module and IO pad_ring module
// num_io_groups_per_side (_GENESIS2_DECLARATION_PRIORITY_) = 1
//
// connect_GC (_GENESIS2_DECLARATION_PRIORITY_) = 0
//
// config_addr_width (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
// config_data_width (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
// num_stall_domains (_GENESIS2_DECLARATION_PRIORITY_) = 4
//
module top (
  //pads_{side}_{group_num_within_side} [bit number within group]
  inout [15:0] pads_N_0,
  inout [15:0] pads_S_0,
  inout [15:0] pads_E_0,
  inout [15:0] pads_W_0,
  input [31:0] config_data_in,
  input [31:0] config_addr_in,
  input tck_pad,
  input tms_pad,
  input trst_pad,
  input tdi_pad,
  output tdo_pad,
  input clk_pad,
  input reset_pad
);




wire clk;
wire reset;
wire tck;
wire tdi;
wire tdo;
wire tms;
wire trst_n;
wire config_read;
wire config_write;
wire [31:0] read_data;
wire [31:0] read_data_core;
wire [31:0] read_data_pads;
wire [3:0] stall;

assign read_data = read_data_core | read_data_pads;

    global_controller_unq1  global_controller
    (
      .clk_in(clk_in),
      .reset_in(reset_in),
      .config_data_in(read_data),
      .tdi(tdi),
      .tdo(tdo),
      .tms(tms),
      .tck(tck),
      .trst_n(trst_n),
      .cgra_stalled(stall),
      .read(config_read)
    );


assign clk = clk_in;
assign reset = reset_in;
assign config_write = 1;
// IFC (_GENESIS2_DECLARATION_PRIORITY_) = 
//	InstancePath:top.global_controller.jtag_controller.ifc (template_ifc_unq1)
//

  wire [15:0] f2p_wide_N_0;
  wire [15:0] f2p_1bit_N_0;
  wire [15:0] p2f_N_0;
  wire [15:0] f2p_wide_S_0;
  wire [15:0] f2p_1bit_S_0;
  wire [15:0] p2f_S_0;
  wire [15:0] f2p_wide_E_0;
  wire [15:0] f2p_1bit_E_0;
  wire [15:0] p2f_E_0;
  wire [15:0] f2p_wide_W_0;
  wire [15:0] f2p_1bit_W_0;
  wire [15:0] p2f_W_0;



  cgra_core  core (
    .f2p_wide_N_0(f2p_wide_N_0),
    .f2p_1bit_N_0(f2p_1bit_N_0),
    .p2f_N_0(p2f_N_0),
    .f2p_wide_S_0(f2p_wide_S_0),
    .f2p_1bit_S_0(f2p_1bit_S_0),
    .p2f_S_0(p2f_S_0),
    .f2p_wide_E_0(f2p_wide_E_0),
    .f2p_1bit_E_0(f2p_1bit_E_0),
    .p2f_E_0(p2f_E_0),
    .f2p_wide_W_0(f2p_wide_W_0),
    .f2p_1bit_W_0(f2p_1bit_W_0),
    .p2f_W_0(p2f_W_0),
    .clk(clk),
    .reset(reset),
    .config_addr(config_addr_in),
    .config_data(config_data_in),
    .config_read(config_read),
    .config_write(config_write),
    .stall(stall),
    .read_data(read_data_core)
  );


  pad_ring  pads (

    .f2p_wide_N_0(f2p_wide_N_0),
    .f2p_1bit_N_0(f2p_1bit_N_0),
    .pads_N_0(pads_N_0),
    .p2f_N_0(p2f_N_0),

    .f2p_wide_S_0(f2p_wide_S_0),
    .f2p_1bit_S_0(f2p_1bit_S_0),
    .pads_S_0(pads_S_0),
    .p2f_S_0(p2f_S_0),

    .f2p_wide_E_0(f2p_wide_E_0),
    .f2p_1bit_E_0(f2p_1bit_E_0),
    .pads_E_0(pads_E_0),
    .p2f_E_0(p2f_E_0),

    .f2p_wide_W_0(f2p_wide_W_0),
    .f2p_1bit_W_0(f2p_1bit_W_0),
    .pads_W_0(pads_W_0),
    .p2f_W_0(p2f_W_0),

    .config_data(config_data_in),
    .config_addr(config_addr_in),
    .config_read(config_read),
    .config_write(config_write),
    .read_data(read_data_pads),
    .clk_pad(clk_pad),
    .reset_pad(reset_pad),
    .tck_pad(tck_pad),
    .tdi_pad(tdi_pad),
    .tms_pad(tms_pad),
    .trst_n_pad(trst_n_pad),
    .tdo_pad(tdo_pad),
    .clk(clk_in),
    .reset(reset_in),
    .tck(tck),
    .tdi(tdi),
    .tms(tms),
    .trst_n(trst_n),
    .tdo(tdo)
  );







endmodule
